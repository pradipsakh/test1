#!groovy


properties([
    parameters([
        booleanParam(name: 'VERIFY_RUN', defaultValue: 'false', description: 'This box must be checked in order to run the job.'),
    //    string(name: 'grp', defaultValue: '', description: 'REQUIRED -- The Ansible Group Name. Use "non_prod" if patching non-production servers, and "prod" if patching production servers.', trip: true)
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the BootGroup From the list', 
            name: 'grp',
            filterLength: 1,
            filterable: false,
            randomName: 'choice-parameter-3702576813509115',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not read the ${env.WORKSPACE}/src directory\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        '''
                               def files = findFiles(glob: 'test/*') 
                                def bootParamsOpts = []
                                files.each{ f -> 
                                    bootParamsOpts << f.name
                                }
                        	return bootParamsOpts
                        '''
                ]
            ]
        ]
    ]),
    disableConcurrentBuilds()
])

node() {
    timestamps {
        try {
            stage('Execute Script') {
                if (params.VERIFY_RUN) {
				checkout scm
			datas = readYaml file: "env.yml"
                     
                        def servicelines = datas.services.readLines()

                        def validationlines = datas.validate.readLines()

                        def bootlines = datas.boot.readLines()

                        def clusterchklines = datas.clusterchk.readLines()

			#!groovy


properties([
    parameters([
        booleanParam(name: 'VERIFY_RUN', defaultValue: 'false', description: 'This box must be checked in order to run the job.'),
    //    string(name: 'grp', defaultValue: '', description: 'REQUIRED -- The Ansible Group Name. Use "non_prod" if patching non-production servers, and "prod" if patching production servers.', trip: true)
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the BootGroup From the list', 
            name: 'grp',
            filterLength: 1,
            filterable: false,
            randomName: 'choice-parameter-3702576813509115',
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not read the ${env.WORKSPACE}/bootplan directory\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        '''
                               def files = findFiles(glob: \'${env.WORKSPACE}/bootplan/**\') 
                                def bootParamsOpts = []
                                files.each{ f -> 
                                    if(f.directory) {
                                    bootParamsOpts << f
                                    }
                                }
                            return bootParamsOpts
                        '''
                ]
            ]
        ]
    ]),
    disableConcurrentBuilds()
])

node() {
    timestamps {
        try {
            stage('Execute Script') {
                if (params.VERIFY_RUN) {
                    if (params.grp != '') {
                        checkout scm
                        echo('This is running in the '+env.TOWER_ENV+' environment.')
                        sh(env.WRAPPERCMD_COMPUTE + " pull jms_nix_automation")
                        sh(env.WRAPPERCMD_COMPUTE + " pull jms_nix_inventory")
                        string limitCmd = ''
                        def servicefile = readFile "bootplan/${params.grp}/services.conf"
                        def servicelines = servicefile.readLines()
                        def validatefile = readFile "bootplan/${params.grp}/validation.conf"
                        def validationlines = validatefile.readLines()
                        def bootfile = readFile "bootplan/${params.grp}/boot.conf"
                        def bootlines = bootfile.readLines()
                        def clustercheckfile = readFile "bootplan/${params.grp}/clusterchk.conf"
                        def clusterchklines = clustercheckfile.readLines()

                        // ####################### Service Stop section #################

                        for (service in servicelines) {
                            if (!service.startsWith( '#' )) {
                                println "service : $service";
                               
                            }
                        }

                } else {
                    echo('The VERIFY_RUN Flag must be checked.')
                    currentBuild.result = "FAILURE"
                }
            }
        } catch (err) {
            currentBuild.result = "FAILURE"
            throw err
        }
    }
}
